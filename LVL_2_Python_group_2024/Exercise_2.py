# a = input()
# str() #створення порожнього рядка
# a = a.replace(' ', '')#"видалення" пробілів
# print(a)

"""#Структура оформлення коду."""
# 0. Підключення бібліотек та модулів (packege)
# 1. Створення глобальних змінних
# 2. Створення функцій та класів (ініціалізація)
# 3. Головний код

'''Способи підключення бібліотек та модулів'''
# import random #підключення всього модуля напряму

# from random import randint, random, choice #Часткове підключення бібліотеки
# from random import * #підключення всього простору імен


# from random import randint as lol, random as something, choice as ff # підключення через анотацію

# random.randint()
# randint()

# random = 9743589

# print(something())
# print(random())

'''LIST - список (не масив)'''
# Послідовність елементів будь якого типу.
# Універсальна структура даних, яка може містити елементи будь якого типу.

# [] - умовне позначення
# list() - генератор списків
# list_1 = []
# list_1 = list()

# list_1 = [324, 4.432,None,245,"efg345tyg45",False,45,[3,24,2354,23], len, sorted]
# str_1 = 'ff9304hyf34'
# list_1 = list(str_1)
# print(list_1)

# str_1 = 'ff9304hyf34'
# list_1 = [str_1]
# print(list_1)

# list_1 = [324, 4.432,None,245,"efg345tyg45",False,45,[3,24,2354,23], len, sorted]

# print(list_1[4:5]) #Отримання низки(списка)  елементівсписка від зазначеного індекса до зазначеного
# print(list_1[4]) #Отримання одного конкретного за індексом елемент списку
#
# print(list_1[7][2])
# el_list_1 = list_1[7]
# print(f'{el_list_1=}')
# el_list_1_index_7 = el_list_1[2]
# print(f'{el_list_1_index_7=}')


# Індексація
# __getitem__() == []
# print(list_1.__getitem__(7))
# print(list_1.__getitem__(7).__getitem__(2))

# Зрізи
# print(list_1[1:5])
# print(list_1[:5])
# print(list_1[2:])

#Перераховуваність - Iterable
# for el in list_1:
    # print(el)

#Mmutable type - змінювана структура
# __setitem__()
# list_1 = [324, 4.432, None, 245, "efg345tyg45", False, 45, [3, 24, 2354, 23], len, sorted]

# list_1[4] = 77777777777
# list_1[3] += 11111111111 #list_1[3] =  list_1[3] + 11111111111
# list_1[7].append(111111)
# list_1[4] = list_1[4].replace('g','OOO')

# list_1[:3] = ['1111111111111', '22222222222222', '33333333333333']
# list_1[:3] = ['1111111111111', '22222222222222', '33333333333333','4444444444444444', '555555555555555555555555']
# list_1[:3] = ['1111111111111']
# list_1[:8:2] = ['1111111111111', '22222222222222', '33333333333333','4444444444444444']
# list_1[:8:2] = ['1111111111111', '22222222222222', '33333333333333','4444444444444444', '55555555555555555555555'] #НЕ МОЖНА МІНЯТИ НЕ ОДНАКОВІ ПОСЛІДОВНОСТІ
# list_1[:3] = []
# print(list_1)

#basic fun
#за посиланням в лмс

'''TUPLE - кортеж'''
#Транзитна структура даних
#tuple()
#()

# tuple_1 = (23,423,54,235,34,6354)
# tuple_1 = ()
# tuple_1 = (23423,)
# print(type(tuple_1))
# tuple_1 = 23423,
# tuple_1 = 23423,345,534,5,346,354,6,457,6568,56745
# print(type(tuple_1))

# Індексованість
# Зрізи
# Перераховуваність
# Незмінювана

#basic fun
# .index() - отримання індекса зазначеного елемента
# .count() - отримання кількості зазначених елементів


'''SET - множина'''
#Множина це - невпорядкована перераховувана структура яка підтримує унікальність зберігаємих елементів

# set()
# {} !!!!!!! АЛЕ
# set_1 = set()

# set_1 = {23,4,235,346,45,'wrefwe', False, 234.234, None, (234,2,534,6534)}
# print(set_1)

#Iterable - перераховувана
#Mmutable - змінювана
#Підтримує унікальність - Unique

#Різниця - deffernce
#Перехресття (перетин) - intersection


#basic fun
# add() - функція допису нового(одного) елемента
# update() - функція допису багатьох елементів

# remove() - функція видалення елемента за значенням
# discard() -  функція видалення елемента за значенням та перевірка його існування в множині

# pop() - видалення останнього елемента записаного в множину

# set_1 = {1,2,3,4,8,9,10}
# set_2 = {1,2,5,6,7,8,11,12,13}

#difference()
# print(set_1.difference(set_2))
# print(set_2.difference(set_1))
# print(set_1 - set_2)

# difference_update()
# set_1.difference_update(set_2)
# print(set_1)

# set_1 -= set_2
# print(set_1)

#symetric_difference()
# set_1 = {1,2,3,4,8,9,10}
# set_2 = {1,2,5,6,7,8,11,12,13}

# print(set_1.symmetric_difference(set_2))
# print(set_1 ^ set_2)

#intersection()
# set_1 = {1,2,3,4,8,9,10}
# set_2 = {1,2,5,6,7,8,11,12,13}

# print(set_1.intersection(set_2))
# print(set_2.intersection(set_1))

# print(set_1 & set_2)

# set_1.intersection_update(set_2)
# print(set_1)

# set_1 &= set_2
# print(set_1)
